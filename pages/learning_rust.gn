!meta!
title: Learning Rust
!meta!

[h2|Learning Rust]

[p|First of all, this is going to primarily be a place to store notes for myself as I learn Rust, so take everything I say with a grain of salt! (and feedback is always appreciated, so feel free to say hi)]

[p|Good resources:]
[ul|
	[li|[a, href: "https://doc.rust-lang.org/book"|The Rust Programming Language]]
	[li|[a, href: "https://www.vandenoever.info/blog/2017/02/17/a-simple-rust-gui-with-qml.html"|Simple Rust GUI with QML]]
	[li|[a, href: "https://www.youtube.com/playlist?list=PLVvjrrRCBy2JSHf9tGxGKJ-bYAN_uDCUL"|Rust Programming Tutorial]]
]

[p|Things to remember:]

[ul|
	[li|variable(y) things[ul|
		[li|variables need the "mut" tag to be changeable]
		[li|it's statically typed! (but has inference)]
		[li|tuples can hold different types, arrays cannot[ul|
			[li|values in tuples can be accessed through "tuple.index"]
		]]
		[li|vectors are like arrays, but they can change size]
		[li|arrays can be defined as "let arr = [3; 4];", which would expand to "[3, 3, 3, 3]"]
		[li|"&" means a reference to an object]
		[li|enums have a fixed set of variables, called the variants]
		[li|can reassign variables, overwriting previous type and value (good for converting between types), called shadowing]
		[li|always have to annotate type for constants]
	]]
	[li|style things[ul|
		[li|most names should be in "snake_case"]
		[li|types, enums, and traits should be in "CamelCase"]
		[li|anything static/constant should be in "SCREAMING_SNAKE_CASE"]
		[li|use underscores in big numbers to break them up ("10_000_000")]
	]]
	[li|various functions/expression things[ul|
		[li|".expect()" is used to handle possible errors, but panics if there is an error]
		[li|the "match" expression[ul|
			[li|is made of arms]
			[li|each arm has a pattern and some code to run]
			[li|connect the code to the pattern with "=>"]
			[li|separate the arms with commas, not semicolons]
			[li|can also use "match" instead of a ".expect()" to handle errors (match output to "Ok" and "Err")]
		]]
	]]
	[li|miscellaneous things[ul|
		[li|if it looks like a function but has a "!" at the end, it's a macro (?? what's a macro ??)]
		[li|"::" refers to an associated function of a "type" (static method)]
		[li|the "Result" enum has two variants, "Ok" and "Err"]
		[li|"gen_range()" is inclusive on the lower bound and exclusive on the upper]
		[li|can use "cargo doc --open" to view the documentation of the packages in your project]
	]]
]

[p|Things I'm not sure about]
[ul|
	[li|macros]
	[li|traits]
]
 
 
 
 
 
