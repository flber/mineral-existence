!meta!
title: Pillar
!meta!

[mark|UNDER CONSTRUCTION]

[h2|Breakdown of Pillar]

[p|Pillar is my custom static site generator, used to build this [a, href: "site.html"|site]. While my site is probably still small enough that I could build it by hand, writing my own site generator (with a custom-ish markup language) was and is a lot of fun :>]

[p|You can find the source code to Pillar in any of these places:]
[ul|
	[li|[a, href: "https://codeberg.org/flbr/Pillar"|codeberg]]
	[li|[a, href: "https://github.com/flber/Pillar"|github]]
	[li|[a, href: "https://git.sr.ht/~flber/pillar"|srht]]
]

[p|This page will serve not as documentation for Pillar (though if that's what you're curious about you can look through the readme in the repo linked above), but as a thorough explantion of how it works. Because I'm almost constantly working on it, I'll try and keep this as up-to-date as possible and give a general outline of what my future plans are.]

[p|Because I want this to be as specific as possible, I'll be including line numbers to reference larger blocks of code and actual code for smaller pieces which I feel deserve their own line-by-line explanations. This is, of course, highly dependent on the version of pillar, so below is a link to the exact commit I'm talking about.]

[p|[a, href: "https://git.sr.ht/~flber/pillar/tree/f3d5479abcbe382b649147781a882a73c212c06b"|f3d5479a]]


[h3|Command-line argument parsing]

[p|Lines [a, href: "https://git.sr.ht/~flber/pillar/tree/f3d5479abcbe382b649147781a882a73c212c06b/item/src/main.rs#L47-77"|47 to 77] reads the given command line arguments and sets three flags, [code|should_build], [code|debug_active], and [code|build_all], which affect how pillar runs. If any invalid input is given, nothing is run and the program simply returns the help menu.]


[h3|Config unwrapping and initial setup]

[p|If [code|should_build] is true, pillar will run. It first gets some config information (either creating a [code|.pillar.toml] file if it doesn't exist, or reading an existing config file), and uses that to find the input and output folders.]

[p|To generate pages, it iterates through all [code|.gn] files in the directory given by the config file:]

[p|[a, href: "https://git.sr.ht/~flber/pillar/tree/f3d5479abcbe382b649147781a882a73c212c06b/item/src/main.rs#L83-87"|L83-87]]
[pre|
for e in fs::read_dir(&config.granite_path)? {
  let entry = e?;
  // normalizes path str
  let path = format!("{:?}", entry.path());
  let path_str = slice(&path, 1..len(&path) - 1);
  ...
]

[p|]


[h3|Begining of parsing]


[h3|Header Parsing]


[h3|Debug output]


[h3|Granite parsing]


[h3|Templating]


[h3|Plugins]
